@inject Microsoft.JSInterop.IJSRuntime js
@inject ProjectApplicationInputModel model

<style>

	.list-group-flush {
		background-color: none;
		color: black;
	}

	.list-group-item {
		background-color: transparent;
		color: black;
		border: 0px;
		padding: 0rem 0.5rem;
	}

	.selected-row {
		background-color: rgba(0,0,0,.3) !important;
	}

	.disabled-row {
		color: lightgray;
	}
</style>

<div class="section">
	@if (ProjectDisplayModels.AcceptsApplications == true)
		{
		<div class="collaborator-profiles-table" id="recommended-profiles">
			<table class="table table-hover table-bordered">
				<caption>Preporučeni profili</caption>
				<thead class="thead-dark">
					<tr>
						<th>Opis pozicije</th>
						<th>Informacije</th>
					</tr>
				</thead>
				<tbody>
					@* tabela sa izdvojenim preporucenim profilima na koje se korisnik moze prijaviti *@
					@for (int i = 0; i < profileList.Where(p => p.Recommended && !p.AlreadyApplied && p.ApplicationsOpen).Count(); ++i)
					{
						var index = i;
						var profile = profileList.Where(p => p.Recommended && !p.AlreadyApplied && p.ApplicationsOpen).ElementAt(index);
						<tr @onclick=@(() => {CollaboratorProfileSelected("recommended-profiles", "collaborator-profiles", profile.CollaboratorProfileId, index);})>
							<td>@profile.Description</td>
							<td>
								@profile.ToString();
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
		<div class="collaborator-profiles-table" id="collaborator-profiles">
			<table class="table table-hover table-bordered">
				<caption>Ostali profili</caption>
				<thead class="thead-dark">
					<tr>
						<th>Opis pozicije</th>
						<th>Informacije</th>
					</tr>
				</thead>
				<tbody></tbody>

				@for (int i = 0; i < profileList.Where(p => !(p.Recommended && !p.AlreadyApplied && p.ApplicationsOpen)).Count(); ++i)
				{
					var index = i;
					var profile = profileList.Where(p => !(p.Recommended && !p.AlreadyApplied && p.ApplicationsOpen)).ElementAt(index);

					@if (!profile.ApplicationsOpen)
					{
						<tr class="disabled-row" data-toggle="tooltip" data-placement="right" title="Ovaj profil trenutno nije otvoren za prijave.">
							<td>@profile.Description</td>
							<td>
								@profile.ToString();
							</td>
						</tr>
						}
					else if (profile.AlreadyApplied)
						{
						<tr class="disabled-row" data-toggle="tooltip" data-placement="right" title="Na ovaj profil ste već prijavljeni.">
							<td>@profile.Description</td>
							<td>
								@profile.ToString();
							</td>
						</tr>
						}
					else
					{
						<tr @onclick=@(() => {CollaboratorProfileSelected("collaborator-profiles", "recommended-profiles", profile.CollaboratorProfileId, index);})>
							<td>@profile.Description</td>
							<td>
								@profile.ToString();
							</td>
						</tr>
						}
					}
				<tbody></tbody>
			</table>
		</div>
		}
	else
	{
	 <p>Projekat trenutno ne prima prijave.</p>
	}


</div>


@code {
	[Parameter]
	public ProjectDisplayModel ProjectDisplayModels { get; set; }

	public ICollection<CollaboratorProfileDisplayModel> profileList = new List<CollaboratorProfileDisplayModel>();


	protected override async Task OnInitializedAsync()
	{
		profileList = ProjectDisplayModels.GetCollaboratorProfileDisplayModels();
		
	}




	[Parameter]
	public bool IsProjectRecommended { get; set; }

	[Parameter]
	public ICollection<StudentProfileDisplayModel> StudentProfileDisplayModels { get; set; }

	[Parameter]
	public ICollection<FacultyMemberProfileDisplayModel> FacultyMemberProfileDisplayModels { get; set; }


	public async Task CollaboratorProfileSelected(string tableToHighlight, string tableToClear, int collaboratorProfileId, int index)
	{		
		string[] tablesToClear = { tableToClear };
		await js.InvokeVoidAsync("setTableHighlight", tableToHighlight, index, tablesToClear);
		model.CollaboratorProfileId = collaboratorProfileId;
	}

	public async Task HighlightRecommendedProfile(string tableToHighlight, int index)
	{
		await js.InvokeVoidAsync("highlightRecommendedProfile", tableToHighlight, index);
	}

	protected override void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);
		if (firstRender)
		{
			model.CollaboratorProfileId = 0;
		}
	}
}
