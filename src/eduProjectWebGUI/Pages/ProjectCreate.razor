@page "/create"
@page "/projects/{id:int}/edit"
@inject ApiService ApiService


<div class="content">
    @if (editing)
    {
        <h3>@projectInputModel.Title</h3>
    }
    else
    {
        <h3>Novi projekat</h3>
    }

    <EditForm Model="@projectInputModel" OnValidSubmit="CreateOrUpdateProject">
        <div class="section">
            <h4 class="title">Osnovne informacije</h4>

            <h5>Naziv projekta</h5>
            <InputText @bind-Value="@projectInputModel.Title"></InputText>

            <h5>Oblast projekta</h5>
            <InputSelect TValue="string"
                         @bind-Value="@projectInputModel.StudyFieldName">
                <option value=null></option>
                @foreach (var sf in studyFields)
                {
                    if (sf.Name == projectInputModel.StudyFieldName)
                    {
                        <option selected value="@sf.Name">@sf.Name</option>
                    }
                    else
                    {
                        <option value="@sf.Name">@sf.Name</option>
                    }
                }
            </InputSelect>

            <h5>Početak realizacije</h5>
            <InputDate @bind-Value="@projectInputModel.StartDate"></InputDate>

            <h5>Kraj realizacije</h5>
            <InputDate @bind-Value="@projectInputModel.EndDate"></InputDate>

            <h5>Opis projekta</h5>
            <InputTextArea @bind-Value="@projectInputModel.Description"></InputTextArea>

            <TagsOverview Editing="editing"
                          ProjectInputModel="projectInputModel"
                          TagNames="projectInputModel.TagNames"></TagsOverview>
            <BlazoredTypeahead SearchMethod="FilterTags"
                               @bind-Value="AddedTag"
                               Context="tag">
                <SelectedTemplate>
                    @tag.Name
                </SelectedTemplate>
                <ResultTemplate>
                    @tag.Name
                </ResultTemplate>
                <NotFoundTemplate>
                    Nema rezultata.
                </NotFoundTemplate>
            </BlazoredTypeahead>
        </div>

        @if (editing)
        {
            <div class="buttons">
                <button class="button button-primary" type="submit">Sačuvaj izmjene</button>
                <button>Odustani</button>
            </div>
        }
        else
        {
            <div class="buttons">
                <button class="button button-primary" type="submit">Oglasi projekat</button>
            </div>
        }
    </EditForm>


    <div class="section">
        <EditForm Model="@collaboratorProfileInputModel" OnValidSubmit="@AddCollaboratorProfile">
            <h4 class="title">Profili traženih saradnika</h4>
            <h5>Tip saradnika</h5>
            <InputSelect TValue="CollaboratorProfileType"
                         ValueChanged="@((CollaboratorProfileType t) => CollaboratorProfileTypeChanged(t))"
                         ValueExpression="@(() => collaboratorProfileInputModel.CollaboratorProfileType)"
                         Value="@collaboratorProfileInputModel.CollaboratorProfileType">
                @foreach (var value in Enum.GetValues(typeof(CollaboratorProfileType)))
                {
                    if ((CollaboratorProfileType)value == collaboratorProfileInputModel.CollaboratorProfileType)
                    {
                        <option selected value="@value">@value</option>
                    }
                    else
                    {
                        <option value="@value">@value</option>
                    }
                }
            </InputSelect>

            <h5>Opis aktivnosti</h5>
            <InputText @bind-Value="@collaboratorProfileInputModel.ActivityDescription">
            </InputText>

            <h5>Fakultet</h5>
            <InputSelect TValue="@string"
                         ValueChanged="@((string f) => FacultySelected(f))"
                         ValueExpression="@(() => collaboratorProfileInputModel.FacultyName)"
                         Value="@collaboratorProfileInputModel.FacultyName">
                <option></option>
                @foreach (var f in faculties)
                {
                    if (f.Name == collaboratorProfileInputModel.FacultyName)
                    {
                        <option selected value="@f.Name">@f.Name</option>
                    }
                    else
                    {
                        <option value="@f.Name">@f.Name</option>
                    }

                }
            </InputSelect>

            @if (collaboratorProfileInputModel.CollaboratorProfileType == CollaboratorProfileType.Student)
            {
                <h5>Ciklus</h5>
                <InputSelect TValue="@string"
                             ValueChanged="@((string c) => { CycleSelected(c); })"
                             ValueExpression="@(() => cycleStr)"
                             Value="@cycleStr">
                    <option></option>
                    @foreach (string c in cycles)
                    {
                        if (c == cycleStr)
                        {
                            <option selected value="@c">@c</option>
                        }
                        else
                        {
                            <option value="@c">@c</option>
                        }
                    }

                </InputSelect>

                <h5>Studijski program</h5>
                <InputSelect TValue="@string"
                             ValueChanged="@((string p) => ProgramSelected(p))"
                             ValueExpression="@(() => collaboratorProfileInputModel.StudyProgramName)"
                             Value="@collaboratorProfileInputModel.StudyProgramName">
                    <option></option>
                    @foreach (var p in programs)
                    {
                        if (p.Name == collaboratorProfileInputModel.StudyProgramName)
                        {
                            <option selected value="@p.Name">@p.Name</option>
                        }
                        else
                        {
                            <option value="@p.Name">@p.Name</option>
                        }
                    }
                </InputSelect>


                <h5>Studijski smjer</h5>
                <InputSelect TValue="@string"
                             ValueChanged="@((string s) => SpecializationSelected(s))"
                             ValueExpression="@(() => collaboratorProfileInputModel.StudyProgramSpecializationName)"
                             Value="@collaboratorProfileInputModel.StudyProgramSpecializationName">
                    <option></option>
                    @foreach (var s in specializations)
                    {
                        if (s.Name == collaboratorProfileInputModel.StudyProgramSpecializationName)
                        {
                            <option selected value="@s.Name">@s.Name</option>
                        }
                        else
                        {
                            <option value="@s.Name">@s.Name</option>
                        }
                    }
                </InputSelect>

                <h5>Godina</h5>
                <InputSelect TValue="@string"
                             ValueChanged="@((string y) => { YearSelected(y); })"
                             ValueExpression="@(() => yearStr)"
                             Value="@yearStr">
                    <option></option>
                    @foreach (int y in years)
                    {
                        if ($"{y}" == yearStr)
                        {
                            <option selected value="@y">@y</option>
                        }
                        else
                        {
                            <option value="@y">@y</option>
                        }
                    }
                </InputSelect>
            }

            @if (collaboratorProfileInputModel.CollaboratorProfileType == CollaboratorProfileType.FacultyMember)
            {
                <h5>Uža naučna oblast</h5>
                <InputSelect TValue="string"
                             @bind-Value="@collaboratorProfileInputModel.StudyFieldName">
                    <option value=null></option>
                    @foreach (var sf in studyFields)
                    {
                        if (sf.Name == collaboratorProfileInputModel.StudyFieldName)
                        {
                            <option selected value="@sf.Name">@sf.Name</option>
                        }
                        else
                        {
                            <option value="@sf.Name">@sf.Name</option>
                        }
                    }
                </InputSelect>
            }
        </EditForm>
    </div>

    <div class="buttons">
        <button class="button button-primary" type="submit">Dodaj saradnika</button>
    </div>

    <div class="section">
        <h4 class="title">Dodani profili saradnika</h4>

        <table class="collaborator-profiles-table">
            <thead>
                <tr>
                    <th>Tip</th>
                    <th>Fakultet</th>
                    <th>Ciklus</th>
                    <th>Program</th>
                    <th>Smjer</th>
                    <th>Godina</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>

                @foreach (var p in projectInputModel.CollaboratorProfileInputModels)
                {
                    <tr>
                        <td>@p.CollaboratorProfileType</td>
                        <td>@p.FacultyName</td>
                        <td>@p.Cycle</td>
                        <td>@p.StudyProgramName</td>
                        <td>@p.StudyProgramSpecializationName</td>
                        <td>@p.StudyFieldName</td>
                        @if (!p.AddedOnCreate)
                        {
                            <td><button @onclick="@(() => RemoveCollaboratorProfile(p))">Ukloni</button></td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code
{
    [Parameter]
    public int Id { get; set; }

    private bool editing = false;

    private ProjectInputModel projectInputModel = new ProjectInputModel();

    // input model for collaborator profile the user is currently creating
    private CollaboratorProfileInputModel collaboratorProfileInputModel = new CollaboratorProfileInputModel();

    // selected values
    private string cycleStr;
    private string yearStr;

    private Tag addedTag;
    public Tag AddedTag
    {
        get { return addedTag; }
        set { addedTag = value; Console.WriteLine($"Dodan {addedTag.Name}"); projectInputModel.TagNames.Add(addedTag.Name); }
    }

    private Faculty faculty;
    int cycle;
    private StudyProgram program;
    private StudyProgramSpecialization specialization;

    // combo boxes backing lists
    private ICollection<StudyField> studyFields = new List<StudyField>();
    private ICollection<Faculty> faculties = new List<Faculty>();
    private ICollection<string> cycles = new List<string>();
    private ICollection<StudyProgram> programs = new List<StudyProgram>();
    private ICollection<StudyProgramSpecialization> specializations = new List<StudyProgramSpecialization>();
    private ICollection<int> years = new List<int>();
    private ICollection<Tag> tags = new List<Tag>();


    protected override async Task OnInitializedAsync()
    {
        faculties = await ApiService.GetAsync<ICollection<Faculty>>($"faculties");
        studyFields = (await ApiService.GetAsync<Dictionary<string, StudyField>>($"fields")).Values;
        tags = (await ApiService.GetAsync<Dictionary<string, Tag>>($"tags")).Values.ToList();

        if (Id > 0)
        {
            // editing project
            editing = true;
            var model = await ApiService.GetAsync<ProjectDisplayModel>($"/projects/{Id}");
            projectInputModel = new ProjectInputModel
            {
                Title = model.Title,
                Description = model.Description,
                StudyFieldName = model.StudyField != null ? model.StudyField.Name : null,
                StartDate = model.StartDate,
                EndDate = model.EndDate,
                TagNames = model.Tags.Select(t => t.Name).ToList()
            };

            projectInputModel.CollaboratorProfileInputModels = new List<CollaboratorProfileInputModel>();
            List<CollaboratorProfileDisplayModel> collaboratorProfileDisplayModels = new List<CollaboratorProfileDisplayModel>();
            foreach (var p in model.StudentProfileDisplayModels)
            {
                collaboratorProfileDisplayModels.Add(p);
            }
            foreach (var p in model.FacultyMemberProfileDisplayModels)
            {
                collaboratorProfileDisplayModels.Add(p);
            }

            foreach (var profileDisplayModel in collaboratorProfileDisplayModels)
            {
                var collaboratorProfileInputModel = CollaboratorProfileInputModel.FromCollaboratorProfileDisplayModel(profileDisplayModel);
                collaboratorProfileInputModel.AddedOnCreate = true;
                projectInputModel.CollaboratorProfileInputModels.Add(collaboratorProfileInputModel);
            }

        }
        else
        {
            editing = false;
            // creating new project
        }
    }

    private async void CreateOrUpdateProject()
    {
        if (editing)
        {
            await ApiService.PutAsync($"/projects/{Id}", projectInputModel);
        }
        else
        {
            await ApiService.PostAsync("/projects", projectInputModel);
        }
    }

    private async void CollaboratorProfileTypeChanged(CollaboratorProfileType type)
    {
        collaboratorProfileInputModel = new CollaboratorProfileInputModel();
        yearStr = string.Empty;
        cycleStr = string.Empty;

        collaboratorProfileInputModel.CollaboratorProfileType = type;
        Console.WriteLine($"Odabran tip saradnika {type}");
    }

    private async void FacultySelected(string facultyName)
    {
        Console.WriteLine($"Odabran fakultet {facultyName}");
        cycles.Clear();
        programs.Clear();
        specializations.Clear();
        years.Clear();
        cycleStr = string.Empty;
        yearStr = string.Empty;

        if (facultyName != string.Empty)
        {
            collaboratorProfileInputModel.FacultyName = facultyName;
            faculty = faculties.Where(f => f.Name == facultyName).First();
            cycles = faculty.StudyPrograms.Select(p => p.Cycle).Distinct().Select(c => $"{c}").ToList();
        }
        else
        {
            collaboratorProfileInputModel.FacultyName = null;
        }
    }

    private async void CycleSelected(string cycleStr)
    {
        this.cycleStr = cycleStr;
        Console.WriteLine($"Odabran ciklus {cycleStr}");
        programs.Clear();
        specializations.Clear();
        years.Clear();

        if (cycleStr != string.Empty)
        {
            collaboratorProfileInputModel.Cycle = int.Parse(cycleStr);
            cycle = int.Parse(cycleStr);
            programs = faculty.StudyPrograms.Where(sp => sp.Cycle == cycle).ToList();
        }
        else
        {
            collaboratorProfileInputModel.Cycle = null;
        }
    }

    private async void ProgramSelected(string programName)
    {
        Console.WriteLine($"Odabran program {programName}");
        specializations.Clear();
        years.Clear();
        yearStr = string.Empty;

        if (programName != string.Empty)
        {
            collaboratorProfileInputModel.StudyProgramName = programName;
            var program = programs.Where(p => p.Cycle == cycle && p.Name == programName).First();
            specializations = program.StudyProgramSpecializations.ToList();
            years = Enumerable.Range(1, program.DurationYears).ToList();
        }
        else
        {
            collaboratorProfileInputModel.StudyProgramName = null;
        }
    }

    private async void YearSelected(string yearStr)
    {
        this.yearStr = yearStr;
        Console.WriteLine($"Odabran ciklus {yearStr}");

        if (yearStr != string.Empty)
        {
            collaboratorProfileInputModel.StudyYear = int.Parse(yearStr);
        }
        else
        {
            collaboratorProfileInputModel.StudyYear = null;
        }
    }

    private async void SpecializationSelected(string specializationName)
    {
        Console.WriteLine($"Odabran smjer {specializationName}");

        if (specializationName != string.Empty)
        {
            collaboratorProfileInputModel.StudyProgramSpecializationName = specializationName;
        }
        else
        {
            collaboratorProfileInputModel.StudyProgramSpecializationName = null;
        }

    }

    private async void AddCollaboratorProfile()
    {
        Console.WriteLine($"Adding {collaboratorProfileInputModel.CollaboratorProfileType}");
        collaboratorProfileInputModel.AddedOnCreate = !editing;
        projectInputModel.CollaboratorProfileInputModels.Add(collaboratorProfileInputModel);
        collaboratorProfileInputModel = new CollaboratorProfileInputModel();

        yearStr = string.Empty;
        cycleStr = string.Empty;
    }

    private async void RemoveCollaboratorProfile(CollaboratorProfileInputModel profile)
    {
        projectInputModel.CollaboratorProfileInputModels.Remove(profile);
    }

    private async Task<IEnumerable<Tag>> FilterTags(string searchText)
    {
        Console.WriteLine(tags.Count());
        Console.WriteLine($"pretrazujemo {searchText}");
        return tags.Where(t => t.Name.StartsWith(searchText));
    }
}


