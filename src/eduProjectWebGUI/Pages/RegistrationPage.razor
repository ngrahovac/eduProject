@page "/account/register"
@inject ApiService ApiService
@inject NavigationManager NavigationManager
@inject IModalService Modal
@layout LoginLayout

<style>
	body {
		padding-top: 7rem;
		padding-bottom: 7rem;
	}

	.container {
		margin-bottom: 60px;
	}

	.tags-margin-right {
		margin-right: 5px;
	}

	.h3-title {
		color: gray;
		text-align: center;
	}

	.selected-row {
		background-color: rgba(0,0,0,.3) !important;
	}

	.spinner-border {
		width: 60px;
		height: 60px;
		text-align: center;
		top: 40%;
		position: absolute;
	}

	label {
		margin-bottom: 0.3rem;
	}

	.btn {
		margin-top: 1rem;
	}

	.center-image {
		text-align: center;
	}


	.label-margin {
		margin-bottom: 0px;
		margin-top: 1.5rem;
	}

	.tags {
		margin-bottom: 0.7rem;
	}

	.btn-save {
		margin-top: 0.7rem;
		margin-left: 0.5rem;
	}


	.h3-subtitle {
		margin-top: 0;
	}

	hr {
		margin-top: 4rem;
	}
</style>



@if (faculties == null || studyFields == null || tags == null)
{
	<div class="d-flex justify-content-center">
		<div class="spinner-border text-info" role="status">
			<span class="sr-only"></span>
		</div>
	</div>
}
else
{
	<div class="container">
		<EditForm Model="@registrationModel" OnValidSubmit="@RegisterUser">
			<ObjectGraphDataAnnotationsValidator />
			<div class="mb-3">
				<label>Email</label>
				<InputText type="text" class="form-control" @bind-Value="@registrationModel.RegisterInputModel.Email"></InputText>
				<p style="color:red"><ValidationMessage For="@(() => registrationModel.RegisterInputModel.Email)" /></p>
			</div>
			<div class="mb-3">
				<label>Lozinka</label>
				<InputText type="password" class="form-control" @bind-Value="@registrationModel.RegisterInputModel.Password"></InputText>
				<p style="color:red"><ValidationMessage For="@(() => registrationModel.RegisterInputModel.Password)" /></p>
			</div>
			<div class="mb-3">
				<label>Ponovite lozinku</label>
				<InputText type="password" class="form-control" @bind-Value="@registrationModel.RegisterInputModel.ConfirmPassword"></InputText>
				<p style="color:red"><ValidationMessage For="@(() => registrationModel.RegisterInputModel.Password)" /></p>
			</div>
			<div class="mb-3">
				<label>Ime</label>
				<InputText class="form-control" @bind-Value="@registrationModel.UserProfileInputModel.FirstName"></InputText>
			</div>
			<div class="mb-3">
				<label>Prezime</label>
				<InputText class="form-control" @bind-Value="@registrationModel.UserProfileInputModel.LastName"></InputText>
			</div>
			<div class="mb-3">
				<label>Tip korisnika</label>
				<InputSelect class="form-control" TValue="UserAccountType"
							 ValueChanged="@((UserAccountType t) => UserAccountTypeChanged(t))"
							 ValueExpression="@(() => registrationModel.UserProfileInputModel.UserAccountType)"
							 Value="@registrationModel.UserProfileInputModel.UserAccountType">
					@foreach (var value in Enum.GetValues(typeof(UserAccountType)))
					{
						if ((UserAccountType)value == registrationModel.UserProfileInputModel.UserAccountType)
							{
							<option selected value="@value">@value</option>
							}
						else
						{
							<option value="@value">@value</option>
							}
						}
				</InputSelect>
				<p style="color:red"><ValidationMessage For="@(() => registrationModel.UserProfileInputModel.UserAccountType)" /></p>
			</div>
			<div class="mb-3">
				<label>Fakultet</label>
				<InputSelect class="form-control" TValue="@string"
							 ValueChanged="@((string f) => FacultySelected(f))"
							 ValueExpression="@(() => registrationModel.UserProfileInputModel.FacultyName)"
							 Value="@registrationModel.UserProfileInputModel.FacultyName">
					<option></option>
					@foreach (var f in faculties)
						{
						if (f.Name == registrationModel.UserProfileInputModel.FacultyName)
							{
							<option selected value="@f.Name">@f.Name</option>
							}
						else
						{
							<option value="@f.Name">@f.Name</option>
							}
						}
				</InputSelect>
			</div>
			@if (registrationModel.UserProfileInputModel.UserAccountType == UserAccountType.Student)
				{
				<div class="mb-3">
					<label>Ciklus</label>
					<InputSelect class="form-control" TValue="@string"
								 ValueChanged="@((string c) => { CycleSelected(c); })"
								 ValueExpression="@(() => cycleStr)"
								 Value="@cycleStr">
									<option></option>
						@foreach (string c in cycles)
							{
							if (c == cycleStr)
								{
								<option selected value="@c">@c</option>
								}
							else
							{
								<option value="@c">@c</option>
								}
							}
					</InputSelect>
				</div>
				<div class="mb-3">
					<label>Studijski program</label>
					<InputSelect class="form-control" TValue="@string"
								 ValueChanged="@((string p) => ProgramSelected(p))"
								 ValueExpression="@(() => registrationModel.UserProfileInputModel.StudyProgramName)"
								 Value="@registrationModel.UserProfileInputModel.StudyProgramName">
						<option></option>
						@foreach (var p in programs)
							{
							if (p.Name == registrationModel.UserProfileInputModel.StudyProgramName)
								{
								<option selected value="@p.Name">@p.Name</option>
								}
							else
							{
								<option value="@p.Name">@p.Name</option>
								}
							}
					</InputSelect>
				</div>
				<div class="mb-3">
					<label>Studijski smjer</label>
					<InputSelect class="form-control" TValue="@string"
								 ValueChanged="@((string s) => SpecializationSelected(s))"
								 ValueExpression="@(() => registrationModel.UserProfileInputModel.StudyProgramSpecializationName)"
								 Value="@registrationModel.UserProfileInputModel.StudyProgramSpecializationName">
						<option></option>
						@foreach (var s in specializations)
							{
							if (s.Name == registrationModel.UserProfileInputModel.StudyProgramSpecializationName)
								{
								<option selected value="@s.Name">@s.Name</option>
								}
							else
							{
								<option value="@s.Name">@s.Name</option>
								}
							}
					</InputSelect>
				</div>
				<div class="mb-3">
					<label>Godina</label>
					<InputSelect class="form-control" TValue="@string"
								 ValueChanged="@((string y) => { YearSelected(y); })"
								 ValueExpression="@(() => yearStr)"
								 Value="@yearStr">
						<option></option>
						@foreach (int y in years)
							{
							if ($"{y}" == yearStr)
								{
								<option selected value="@y">@y</option>
								}
							else
							{
								<option value="@y">@y</option>
								}
							}
					</InputSelect>
				</div>
				}
			@if (registrationModel.UserProfileInputModel.UserAccountType == UserAccountType.FacultyMember)
				{
				<div class="mb-3">
					<label>Akademsko zvanje</label>
					<InputSelect class="form-control" @bind-Value="@registrationModel.UserProfileInputModel.AcademicRank">
						@foreach (var value in Enum.GetValues(typeof(AcademicRank)))
							{
							if ((AcademicRank)value == registrationModel.UserProfileInputModel.AcademicRank)
								{
								<option selected value="@value">@value</option>
								}
							else
							{
								<option value="@value">@value</option>
								}
							}
					</InputSelect>
				</div>
				<div class="mb-3">
					<label>Uža naučna oblast</label>
					<InputSelect class="form-control" TValue="string"
								 @bind-Value="@registrationModel.UserProfileInputModel.StudyFieldName">	
						<option value=null></option>
						@foreach (var sf in studyFields)
							{
							if (sf.Name == registrationModel.UserProfileInputModel.StudyFieldName)
								{
								<option selected value="@sf.Name">@sf.Name</option>
								}
							else
							{
								<option value="@sf.Name">@sf.Name</option>
								}
							}
					</InputSelect>
				</div>
				}
			<button class="btn btn-outline-info float-right" type="submit">Registruj se</button>
		</EditForm>
	</div>
	}

@code {
    private RegistrationInputModel2 registrationModel = new RegistrationInputModel2();

    private ICollection<Faculty> faculties;
    private ICollection<StudyField> studyFields;
    private ICollection<Tag> tags;

    // selected values
    private string cycleStr;
    private string yearStr;

    private ICollection<string> cycles = new List<string>();
    private ICollection<StudyProgram> programs = new List<StudyProgram>();
    private ICollection<StudyProgramSpecialization> specializations = new List<StudyProgramSpecialization>();
    private ICollection<int> years = new List<int>();

    private Faculty faculty;
    int cycle;

    protected override async Task OnInitializedAsync()
    {
        faculties = (await ApiService.GetAsync<ICollection<Faculty>>($"faculties")).Item1;
        studyFields = (await ApiService.GetAsync<Dictionary<string, StudyField>>($"fields")).Item1.Values;
        tags = (await ApiService.GetAsync<Dictionary<string, Tag>>($"tags")).Item1.Values.ToList();
    }

    public async Task RegisterUser()
    {
        try
        {
            var response = await ApiService.PostAsync<RegistrationInputModel2>("/account/register", registrationModel);
            var parameters = new ModalParameters();

            if (response.IsSuccessStatusCode)
            {
                parameters.Add(nameof(InfoPopup.Message), "Akcija je uspješno izvršena.\nMolimo Vas da potvrdite registraciju klikom na link kojeg smo Vam poslali na mail adresu. Nakon toga, možete se prijaviti na sistem.");
            }
            else
            {
                parameters.Add(nameof(InfoPopup.Message), "Registracija neuspješna.");
            }

            var msgForm = Modal.Show<InfoPopup>("Obavještenje", parameters);
            var resForm = await msgForm.Result;

            if (!resForm.Cancelled)
            {
				NavigationManager.NavigateTo($"/account/login", true);
            }
        }
        catch (Exception ex)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(InfoPopup.Message), "Desila se neočekivana greška. Molimo pokušajte kasnije.");
            Modal.Show<InfoPopup>("Obavještenje", parameters);
        }

        /*
		Console.WriteLine("REGISTER");
		await ApiService.PostAsync("/account/register", registerInputModel);

		await ApiService.PostAsync("/users", userProfileInputModel);

		NavigationManager.NavigateTo("/account/login");*/
    }

    private async Task UserAccountTypeChanged(UserAccountType type)
    {
        if (type != registrationModel.UserProfileInputModel.UserAccountType)
        {
            registrationModel.UserProfileInputModel.Clear();
            registrationModel.UserProfileInputModel.UserAccountType = type;

            // cistimo formu
            yearStr = string.Empty;
            cycleStr = string.Empty;

            Console.WriteLine($"Odabran tip korisnika {type}");
        }
    }

    private async Task FacultySelected(string facultyName)
    {
        Console.WriteLine($"Odabran fakultet {facultyName}");
        cycles.Clear();
        programs.Clear();
        specializations.Clear();
        years.Clear();
        cycleStr = string.Empty;
        yearStr = string.Empty;

        registrationModel.UserProfileInputModel.StudyProgramName = null;
        registrationModel.UserProfileInputModel.StudyProgramSpecializationName = null;


        if (facultyName != string.Empty)
        {
            registrationModel.UserProfileInputModel.FacultyName = facultyName;
            faculty = faculties.Where(f => f.Name == facultyName).First();
            cycles = faculty.StudyPrograms.Select(p => p.Cycle).Distinct().Select(c => $"{c}").ToList();
        }
        else
        {
            registrationModel.UserProfileInputModel.FacultyName = null;
        }
        registrationModel.UserProfileInputModel.Cycle = null;
        registrationModel.UserProfileInputModel.StudyProgramName = null;
        registrationModel.UserProfileInputModel.StudyProgramSpecializationName = null;
        registrationModel.UserProfileInputModel.StudyYear = null;
        base.StateHasChanged();
    }

    private async Task CycleSelected(string cycleStr)
    {
        this.cycleStr = cycleStr;
        Console.WriteLine($"Odabran ciklus {cycleStr}");
        programs.Clear();
        specializations.Clear();
        years.Clear();

        if (cycleStr != string.Empty)
        {
            registrationModel.UserProfileInputModel.Cycle = int.Parse(cycleStr);
            cycle = int.Parse(cycleStr);
            programs = faculty.StudyPrograms.Where(sp => sp.Cycle == cycle).ToList();
        }
        else
        {
            registrationModel.UserProfileInputModel.Cycle = null;
        }
        registrationModel.UserProfileInputModel.StudyProgramName = null;
        registrationModel.UserProfileInputModel.StudyProgramSpecializationName = null;
        registrationModel.UserProfileInputModel.StudyYear = null;
        base.StateHasChanged();
    }

    private async Task ProgramSelected(string programName)
    {
        Console.WriteLine($"Odabran program {programName}");
        specializations.Clear();
        years.Clear();
        yearStr = string.Empty;

        if (programName != string.Empty)
        {
            registrationModel.UserProfileInputModel.StudyProgramName = programName;
            var program = programs.Where(p => p.Cycle == cycle && p.Name == programName).First();
            Console.WriteLine("program je ");
            Console.WriteLine(program);
            specializations = program.StudyProgramSpecializations.ToList();
            years = Enumerable.Range(1, program.DurationYears).ToList();
        }
        else
        {
            registrationModel.UserProfileInputModel.StudyProgramName = null;
        }
        registrationModel.UserProfileInputModel.StudyProgramSpecializationName = null;
        registrationModel.UserProfileInputModel.StudyYear = null;
        base.StateHasChanged();
    }

    private async Task YearSelected(string yearStr)
    {
        this.yearStr = yearStr;
        Console.WriteLine($"Odabran ciklus {yearStr}");

        if (yearStr != string.Empty)
        {
            registrationModel.UserProfileInputModel.StudyYear = int.Parse(yearStr);
        }
        else
        {
            registrationModel.UserProfileInputModel.StudyYear = null;
        }
        base.StateHasChanged();
    }

    private async Task SpecializationSelected(string specializationName)
    {
        Console.WriteLine($"Odabran smjer {specializationName}");

        if (specializationName != string.Empty)
        {
            registrationModel.UserProfileInputModel.StudyProgramSpecializationName = specializationName;
        }
        else
        {
            registrationModel.UserProfileInputModel.StudyProgramSpecializationName = null;
        }
        base.StateHasChanged();
    }
	}
