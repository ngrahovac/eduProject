@page "/applications/user/{UserId:int}"
@inject ApiService ApiService

<div class="content">
    <h3>Poslane prijave</h3>

    @foreach (var projectModel in ProjectApplicationsDisplayModels)
    {
        <div class="section">
            <h4 class="title">@projectModel.Title</h4>

            @foreach (var profileModel in projectModel.CollaboratorProfileApplicationsDisplayModels)
            {
                <h5>@profileModel.CollaboratorProfileDisplayModel.Description</h5>
                <table class="collaborator-profiles-table">
                    <thead>
                        <tr>
                            <td>Id prijave</td>
                            <td>Komentar prijavljenog</td>
                            <td>Komentar autora</td>
                            <td>Status prijave</td>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var applicationModel in profileModel.ApplicationDisplayModels)
                        {
                            <tr @onclick="@(()=> { selectedApplicationId = applicationModel.ApplicationId; })">
                                <td>@applicationModel.ApplicationId</td>
                                <td>@applicationModel.ApplicantComment</td>
                                <td>@applicationModel.AuthorComment</td>
                                <td>@applicationModel.ProjectApplicationStatus</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    }

    <div class="buttons">
        <button @onclick="@RevokeApplication">Poništi prijavu</button>
    </div>
</div>

@code {

    [Parameter] public int UserId { get; set; }

    private int selectedApplicationId = 0;

    public List<ProjectApplicationsDisplayModel> ProjectApplicationsDisplayModels { get; set; } = new List<ProjectApplicationsDisplayModel>();

    protected override async Task OnInitializedAsync()
    {
        ProjectApplicationsDisplayModels = (await ApiService.GetAsync<ICollection<ProjectApplicationsDisplayModel>>($"/applications/applicant/{UserId}")).ToList();

        foreach (var model in ProjectApplicationsDisplayModels)
        {
            model.CollaboratorProfileApplicationsDisplayModels = model.CollaboratorProfileApplicationsDisplayModels
                                                                      .Where(m => m.ApplicationDisplayModels.Select(a => a.ApplicantId).Contains(UserId)).ToList();
        }
    }

    public async Task RevokeApplication()
    {
        if (selectedApplicationId != 0)
        {
            await ApiService.DeleteAsync($"/applications/{selectedApplicationId}");
        }
    }

}
