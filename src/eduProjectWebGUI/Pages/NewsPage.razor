@page "/news"
@inject ApiService ApiService
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject IModalService Modal

<style>

	body {
		padding-top: 7rem;
	}

	.container {
		margin-bottom: 60px;
	}

	.spinner-border {
		width: 60px;
		height: 60px;
		text-align: center;
		top: 40%;
		position: absolute;
	}

	.time-period {
		display: flex;
		flex-wrap: wrap;
		color: #1E75D9;
		position: absolute;
		right: 10px;
		bottom: 5px;
	}

	.h3-title {
		color: gray;
		text-align: center;
		margin-bottom: 1.5rem;
	}

	.list-group-item-action {
		margin-bottom: 0.5rem;
		border: 1px solid lightgray;
		border-top-width: 1px;
		border-radius: 4px;
	}

	.list-group-item + .list-group-item {
		border-top-width: 1px;
	}
</style>

<AuthorizeView>
	<Authorized>
		<div class="container">

			@if (newsDisplayModels.Count() == 0)
				{
				<div class="d-flex justify-content-center">
					<div class="spinner-border text-info" role="status">
						<span class="sr-only"></span>
					</div>
				</div>
				}
			else
			{
				<h3 class="h3-title">Novosti</h3>
				@foreach (var model in newsDisplayModels)
					{
					<a class="list-group-item list-group-item-action">
						<div class="d-flex w-100 justify-content-between">
							<h4 class="mb-1" style="font-weight:bold;">@model.Title</h4>
						</div>
						<p class="mb-1">@model.Content</p>
						<div class="time-period">
							@model.Date
						</div>
					</a>
					}
				}
		</div>
	</Authorized>
	<NotAuthorized>
		<NotAuthorizedComponent>
		</NotAuthorizedComponent>
	</NotAuthorized>
</AuthorizeView>

@code {

	public ICollection<NewsDisplayModel> newsDisplayModels = new List<NewsDisplayModel>();
	protected override async Task OnInitializedAsync()
	{
		try
		{
			var response = await ApiService.GetAsync<ICollection<NewsDisplayModel>>("/news");
			var code = response.Item2;

			if (!code.IsSuccessCode())
			{
				var parameters = new ModalParameters();
				parameters.Add(nameof(InfoPopup.Message), code.GetMessage());
				Modal.Show<InfoPopup>("Obavještenje", parameters);
			}
			else
			{
				newsDisplayModels = response.Item1.ToList();
			}
		}
		catch (Exception ex)
		{
			var parameters = new ModalParameters();
			parameters.Add(nameof(InfoPopup.Message), "Desila se neočekivana greška. Molimo pokušajte kasnije.");
			Modal.Show<InfoPopup>("Obavještenje", parameters);
		}
	}


}
